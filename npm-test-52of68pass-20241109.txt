 FAIL  test/dishes-router.test.js
  ● dishes router › create method › returns 400 if price is less than zero

    expect(received).toBeUndefined()

    Received: {"description": "description", "id": "4c505f34ca75cb27dbf54ea5ebdcb578", "image_url": "none", "name": "name", "price": -9007199254740991}

      138 |         });
      139 |
    > 140 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      141 |       expect(response.body.error).toContain("price");
      142 |       expect(response.status).toBe(400);
      143 |     });

      at Object.<anonymous> (test/dishes-router.test.js:140:34)

  ● dishes router › update method › returns 400 if price is not a number

    expect(received).toBeUndefined()

    Received: {"description": "Whole eggs preserved in clay and ash for a few months", "id": "17", "image_url": "some-valid-url", "name": "Century Eggs", "price": "17"}

      546 |         .send({ data: { ...original } });
      547 |
    > 548 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      549 |       expect(response.body.error).toContain("price");
      550 |       expect(response.status).toBe(400);
      551 |     });

      at Object.<anonymous> (test/dishes-router.test.js:548:34)

  ● dishes router › update method › returns 400 if price is less than zero

    expect(received).toBeUndefined()

    Received: {"description": "Whole eggs preserved in clay and ash for a few months", "id": "17", "image_url": "some-valid-url", "name": "Century Eggs", "price": -9007199254740991}

      588 |         .send({ data: { ...original, price: Number.MIN_SAFE_INTEGER } });
      589 |
    > 590 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      591 |       expect(response.body.error).toContain("price");
      592 |       expect(response.status).toBe(400);
      593 |     });

      at Object.<anonymous> (test/dishes-router.test.js:590:34)

 FAIL  test/orders-router.test.js
  ● orders router › create method › creates a new order and assigns id

    expect(received).toBeUndefined()

    Received: "Must include a status"

      54 |         });
      55 |
    > 56 |       expect(response.body.error).toBeUndefined();
         |                                   ^
      57 |       expect(response.body.data).not.toBeUndefined();
      58 |       expect(response.body.data.id).not.toBeUndefined();
      59 |       expect(response.body.data.deliverTo).toEqual(expectedDeliverTo);

      at Object.<anonymous> (test/orders-router.test.js:56:35)

  ● orders router › update method › updates the order if data.id is missing, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Must include a id"

      394 |         });
      395 |
    > 396 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      397 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      398 |       expect(response.status).toBe(200);
      399 |     });

      at Object.<anonymous> (test/orders-router.test.js:396:35)

  ● orders router › update method › updates the order if data.id is empty, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Must include a id"

      410 |         });
      411 |
    > 412 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      413 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      414 |       expect(response.status).toBe(200);
      415 |     });

      at Object.<anonymous> (test/orders-router.test.js:412:35)

  ● orders router › update method › updates the order if data.id is null, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Must include a id"

      426 |         });
      427 |
    > 428 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      429 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      430 |       expect(response.status).toBe(200);
      431 |     });

      at Object.<anonymous> (test/orders-router.test.js:428:35)

  ● orders router › update method › updates the order if data.id is undefined, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Must include a id"

      442 |         });
      443 |
    > 444 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      445 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      446 |       expect(response.status).toBe(200);
      447 |     });

      at Object.<anonymous> (test/orders-router.test.js:444:35)

  ● orders router › update method › returns 400 if dishes is empty

    expect(received).toBeUndefined()

    Received: {"deliverTo": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "dishes": [], "id": "20", "mobileNumber": "(202) 456-1111", "status": "pending"}

      550 |         });
      551 |
    > 552 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      553 |
      554 |       expect(response.body.error).toContain("dish");
      555 |       expect(response.status).toBe(400);

      at Object.<anonymous> (test/orders-router.test.js:552:34)

  ● orders router › update method › returns 400 if dishes is not an array

    expect(received).toBeUndefined()

    Received: {"deliverTo": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "dishes": "some-dishes", "id": "21", "mobileNumber": "(202) 456-1111", "status": "pending"}

      567 |         });
      568 |
    > 569 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      570 |       expect(response.body.error).toContain("dish");
      571 |       expect(response.status).toBe(400);
      572 |     });

      at Object.<anonymous> (test/orders-router.test.js:569:34)

  ● orders router › update method › returns 400 if a dish is missing quantity

    expect(received).toBeUndefined()

    Received: {"deliverTo": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "dishes": [{"description": "A warm bagel filled with falafel and tahini", "id": "90c3d873684bf381dfab29034b5bba73", "image_url": "https://images.pexels.com/photos/4560606/pexels-photo-4560606.jpeg?h=530&w=350", "name": "Falafel and tahini bagel", "price": 6, "quantity": 1}, {"description": "Spaghetti topped with a blend of dolcelatte and fresh chickpeas", "id": "d351db2b49b69679504652ea1cf38241", "image_url": "https://images.pexels.com/photos/1279330/pexels-photo-1279330.jpeg?h=530&w=350", "name": "Dolcelatte and chickpea spaghetti", "price": 19}], "id": "22", "mobileNumber": "(202) 456-1111", "status": "pending"}

      604 |         });
      605 |
    > 606 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      607 |       expect(response.body.error).toContain("1");
      608 |       expect(response.body.error).toContain("quantity");
      609 |       expect(response.status).toBe(400);

      at Object.<anonymous> (test/orders-router.test.js:606:34)

  ● orders router › update method › returns 400 if a dish quantity is zero

    expect(received).toBeUndefined()

    Received: {"deliverTo": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "dishes": [{"description": "A warm bagel filled with falafel and tahini", "id": "90c3d873684bf381dfab29034b5bba73", "image_url": "https://images.pexels.com/photos/4560606/pexels-photo-4560606.jpeg?h=530&w=350", "name": "Falafel and tahini bagel", "price": 6, "quantity": 0}, {"description": "Spaghetti topped with a blend of dolcelatte and fresh chickpeas", "id": "d351db2b49b69679504652ea1cf38241", "image_url": "https://images.pexels.com/photos/1279330/pexels-photo-1279330.jpeg?h=530&w=350", "name": "Dolcelatte and chickpea spaghetti", "price": 19, "quantity": 2}], "id": "23", "mobileNumber": "(202) 456-1111", "status": "pending"}

      642 |         });
      643 |
    > 644 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      645 |       expect(response.body.error).toContain("0");
      646 |       expect(response.body.error).toContain("quantity");
      647 |       expect(response.status).toBe(400);

      at Object.<anonymous> (test/orders-router.test.js:644:34)

  ● orders router › update method › returns 400 if a dish quantity is not an integer

    expect(received).toBeUndefined()

    Received: {"deliverTo": "1600 Pennsylvania Avenue NW, Washington, DC 20500", "dishes": [{"description": "A warm bagel filled with falafel and tahini", "id": "90c3d873684bf381dfab29034b5bba73", "image_url": "https://images.pexels.com/photos/4560606/pexels-photo-4560606.jpeg?h=530&w=350", "name": "Falafel and tahini bagel", "price": 6, "quantity": 1}, {"description": "Spaghetti topped with a blend of dolcelatte and fresh chickpeas", "id": "d351db2b49b69679504652ea1cf38241", "image_url": "https://images.pexels.com/photos/1279330/pexels-photo-1279330.jpeg?h=530&w=350", "name": "Dolcelatte and chickpea spaghetti", "price": 19, "quantity": 2}, {"description": "Crunchy stir fry featuring fresh broccoli and beetroot", "id": "3c637d011d844ebab1205fef8a7e36ea", "image_url": "https://images.pexels.com/photos/4144234/pexels-photo-4144234.jpeg?h=530&w=350", "name": "Broccoli and beetroot stir fry", "price": 15, "quantity": "7"}], "id": "24", "mobileNumber": "(202) 456-1111", "status": "pending"}

      690 |         });
      691 |
    > 692 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      693 |       expect(response.body.error).toContain("2"); // 2 refers to the index
      694 |       expect(response.body.error).toContain("quantity");
      695 |       expect(response.status).toBe(400);

      at Object.<anonymous> (test/orders-router.test.js:692:34)

  ● orders router › delete method › returns 204 for existing order

    expect(received).toBeUndefined()

    Received: "DELETE not allowed for /orders-router/22"

      758 |
      759 |       expect(response.body.data).toBeUndefined();
    > 760 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      761 |       expect(response.status).toBe(204);
      762 |
      763 |       const deleted = await request(app)

      at Object.<anonymous> (test/orders-router.test.js:760:35)

  ● orders router › delete method › returns 404 for non-existent order

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 405

      774 |       expect(response.body.data).toBeUndefined();
      775 |       expect(response.body.error).toContain("23");
    > 776 |       expect(response.status).toBe(404);
          |                               ^
      777 |     });
      778 |     test("returns 400 if order.status !== 'pending'", async () => {
      779 |       orders.push({ ...validOrder, id: "30", status: "preparing" });

      at Object.<anonymous> (test/orders-router.test.js:776:31)

  ● orders router › delete method › returns 400 if order.status !== 'pending'

    expect(received).toContain(expected) // indexOf

    Expected substring: "pending"
    Received string:    "DELETE not allowed for /orders-router/30"

      784 |
      785 |       expect(response.body.data).toBeUndefined();
    > 786 |       expect(response.body.error).toContain("pending");
          |                                   ^
      787 |       expect(response.status).toBe(400);
      788 |     });
      789 |   });

      at Object.<anonymous> (test/orders-router.test.js:786:35)

Test Suites: 2 failed, 2 total
Tests:       16 failed, 52 passed, 68 total
Snapshots:   0 total
Time:        0.567 s, estimated 1 s
Ran all test suites.
