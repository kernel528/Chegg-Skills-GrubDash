: npm test                          

> zid-be-project-grub-dash-01-qualified@1.0.0 test
> jest

 FAIL  test/dishes-router.test.js
  ● dishes router › create method › returns 400 if price is less than zero

    expect(received).toBeUndefined()

    Received: {"description": "description", "id": "7ece5222e9021ddc6ccb48cdd2b17184", "image_url": "none", "name": "name", "price": -9007199254740991}

      138 |         });
      139 |
    > 140 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      141 |       expect(response.body.error).toContain("price");
      142 |       expect(response.status).toBe(400);
      143 |     });

      at Object.<anonymous> (test/dishes-router.test.js:140:34)

  ● dishes router › update method › returns 404 if dish does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 400

      189 |
      190 |       expect(response.body.error).not.toBeUndefined();
    > 191 |       expect(response.status).toBe(404);
          |                               ^
      192 |     });
      193 |
      194 |     test("updates the dish", async () => {

      at Object.<anonymous> (test/dishes-router.test.js:191:31)

  ● dishes router › update method › returns 400 if data.id does not match :dishId in the route

    expect(received).toBeUndefined()

    Received: {"description": "lightly steamed in a hot water bath.", "id": "14", "image_url": "some-valid-url", "name": "Coddled Eggs", "price": 14}

      247 |         });
      248 |
    > 249 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      250 |       expect(response.body.error).toContain("id");
      251 |       expect(response.body.error).toContain("19");
      252 |       expect(response.status).toBe(400);

      at Object.<anonymous> (test/dishes-router.test.js:249:34)

  ● dishes router › update method › returns 400 if price is not a number

    expect(received).toBeUndefined()

    Received: {"description": "Whole eggs preserved in clay and ash for a few months", "id": "17", "image_url": "some-valid-url", "name": "Century Eggs", "price": "17"}

      546 |         .send({ data: { ...original } });
      547 |
    > 548 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      549 |       expect(response.body.error).toContain("price");
      550 |       expect(response.status).toBe(400);
      551 |     });

      at Object.<anonymous> (test/dishes-router.test.js:548:34)

  ● dishes router › update method › returns 400 if price is less than zero

    expect(received).toBeUndefined()

    Received: {"description": "Whole eggs preserved in clay and ash for a few months", "id": "17", "image_url": "some-valid-url", "name": "Century Eggs", "price": -9007199254740991}

      588 |         .send({ data: { ...original, price: Number.MIN_SAFE_INTEGER } });
      589 |
    > 590 |       expect(response.body.data).toBeUndefined();
          |                                  ^
      591 |       expect(response.body.error).toContain("price");
      592 |       expect(response.status).toBe(400);
      593 |     });

      at Object.<anonymous> (test/dishes-router.test.js:590:34)

 FAIL  test/orders-router.test.js
  ● orders router › create method › creates a new order and assigns id

    expect(received).toBeUndefined()

    Received: "POST not allowed for /orders-router"

      54 |         });
      55 |
    > 56 |       expect(response.body.error).toBeUndefined();
         |                                   ^
      57 |       expect(response.body.data).not.toBeUndefined();
      58 |       expect(response.body.data.id).not.toBeUndefined();
      59 |       expect(response.body.data.deliverTo).toEqual(expectedDeliverTo);

      at Object.<anonymous> (test/orders-router.test.js:56:35)

  ● orders router › create method › returns 400 if deliverTo is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "deliverTo"
    Received string:    "POST not allowed for /orders-router"

      77 |       expect(response.body.data).toBeUndefined();
      78 |
    > 79 |       expect(response.body.error).toContain(expected);
         |                                   ^
      80 |       expect(response.status).toBe(400);
      81 |     });
      82 |

      at Object.<anonymous> (test/orders-router.test.js:79:35)

  ● orders router › create method › returns 400 if deliverTo is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "deliverTo"
    Received string:    "POST not allowed for /orders-router"

       95 |       expect(response.body.data).toBeUndefined();
       96 |
    >  97 |       expect(response.body.error).toContain(expected);
          |                                   ^
       98 |       expect(response.status).toBe(400);
       99 |     });
      100 |

      at Object.<anonymous> (test/orders-router.test.js:97:35)

  ● orders router › create method › returns 400 if mobileNumber is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "mobileNumber"
    Received string:    "POST not allowed for /orders-router"

      114 |       expect(response.body.data).toBeUndefined();
      115 |
    > 116 |       expect(response.body.error).toContain(expected);
          |                                   ^
      117 |       expect(response.status).toBe(400);
      118 |     });
      119 |

      at Object.<anonymous> (test/orders-router.test.js:116:35)

  ● orders router › create method › returns 400 if mobileNumber is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "mobileNumber"
    Received string:    "POST not allowed for /orders-router"

      132 |       expect(response.body.data).toBeUndefined();
      133 |
    > 134 |       expect(response.body.error).toContain(expected);
          |                                   ^
      135 |       expect(response.status).toBe(400);
      136 |     });
      137 |

      at Object.<anonymous> (test/orders-router.test.js:134:35)

  ● orders router › create method › returns 400 if dishes is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "dish"
    Received string:    "POST not allowed for /orders-router"

      150 |
      151 |       expect(response.body.data).toBeUndefined();
    > 152 |       expect(response.body.error).toContain("dish");
          |                                   ^
      153 |       expect(response.status).toBe(400);
      154 |     });
      155 |

      at Object.<anonymous> (test/orders-router.test.js:152:35)

  ● orders router › create method › returns 400 if dishes is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "dish"
    Received string:    "POST not allowed for /orders-router"

      167 |       expect(response.body.data).toBeUndefined();
      168 |
    > 169 |       expect(response.body.error).toContain("dish");
          |                                   ^
      170 |       expect(response.status).toBe(400);
      171 |     });
      172 |

      at Object.<anonymous> (test/orders-router.test.js:169:35)

  ● orders router › create method › returns 400 if dishes is not an array

    expect(received).toContain(expected) // indexOf

    Expected substring: "dish"
    Received string:    "POST not allowed for /orders-router"

      182 |
      183 |       expect(response.body.data).toBeUndefined();
    > 184 |       expect(response.body.error).toContain("dish");
          |                                   ^
      185 |       expect(response.status).toBe(400);
      186 |     });
      187 |

      at Object.<anonymous> (test/orders-router.test.js:184:35)

  ● orders router › create method › returns 400 if a dish is missing quantity

    expect(received).toContain(expected) // indexOf

    Expected substring: "1"
    Received string:    "POST not allowed for /orders-router"

      218 |
      219 |       expect(response.body.data).toBeUndefined();
    > 220 |       expect(response.body.error).toContain("1");
          |                                   ^
      221 |       expect(response.body.error).toContain("quantity");
      222 |       expect(response.status).toBe(400);
      223 |     });

      at Object.<anonymous> (test/orders-router.test.js:220:35)

  ● orders router › create method › returns 400 if a dish quantity is zero

    expect(received).toContain(expected) // indexOf

    Expected substring: "0"
    Received string:    "POST not allowed for /orders-router"

      255 |
      256 |       expect(response.body.data).toBeUndefined();
    > 257 |       expect(response.body.error).toContain("0");
          |                                   ^
      258 |       expect(response.body.error).toContain("quantity");
      259 |       expect(response.status).toBe(400);
      260 |     });

      at Object.<anonymous> (test/orders-router.test.js:257:35)

  ● orders router › create method › returns 400 if a dish quantity is not an integer

    expect(received).toContain(expected) // indexOf

    Expected substring: "2"
    Received string:    "POST not allowed for /orders-router"

      302 |
      303 |       expect(response.body.data).toBeUndefined();
    > 304 |       expect(response.body.error).toContain("2");
          |                                   ^
      305 |       expect(response.body.error).toContain("quantity");
      306 |       expect(response.status).toBe(400);
      307 |     });

      at Object.<anonymous> (test/orders-router.test.js:304:35)

  ● orders router › read method › returns an existing order

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/42"

      318 |         .set("Accept", "application/json");
      319 |
    > 320 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      321 |       expect(response.body.data).toEqual(expected);
      322 |       expect(response.status).toBe(200);
      323 |     });

      at Object.<anonymous> (test/orders-router.test.js:320:35)

  ● orders router › update method › updates the order

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/14"

      360 |         .send({ data: expected });
      361 |
    > 362 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      363 |       expect(response.body.data).toEqual(expected);
      364 |       expect(response.status).toBe(200);
      365 |     });

      at Object.<anonymous> (test/orders-router.test.js:362:35)

  ● orders router › update method › returns 400 if data.id does not match :orderId in the route

    expect(received).toContain(expected) // indexOf

    Expected substring: "id"
    Received string:    "Path not found: /orders-router/14"

      377 |
      378 |       expect(response.body.data).toBeUndefined();
    > 379 |       expect(response.body.error).toContain("id");
          |                                   ^
      380 |       expect(response.body.error).toContain("19");
      381 |       expect(response.status).toBe(400);
      382 |     });

      at Object.<anonymous> (test/orders-router.test.js:379:35)

  ● orders router › update method › updates the order if data.id is missing, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/14"

      394 |         });
      395 |
    > 396 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      397 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      398 |       expect(response.status).toBe(200);
      399 |     });

      at Object.<anonymous> (test/orders-router.test.js:396:35)

  ● orders router › update method › updates the order if data.id is empty, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/14"

      410 |         });
      411 |
    > 412 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      413 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      414 |       expect(response.status).toBe(200);
      415 |     });

      at Object.<anonymous> (test/orders-router.test.js:412:35)

  ● orders router › update method › updates the order if data.id is null, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/14"

      426 |         });
      427 |
    > 428 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      429 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      430 |       expect(response.status).toBe(200);
      431 |     });

      at Object.<anonymous> (test/orders-router.test.js:428:35)

  ● orders router › update method › updates the order if data.id is undefined, even though it does not match :orderId in the route

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/14"

      442 |         });
      443 |
    > 444 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      445 |       expect(response.body.data).toEqual({ ...expected, id: "14" });
      446 |       expect(response.status).toBe(200);
      447 |     });

      at Object.<anonymous> (test/orders-router.test.js:444:35)

  ● orders router › update method › returns 400 if deliverTo is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "deliverTo"
    Received string:    "Path not found: /orders-router/15"

      462 |       expect(response.body.data).toBeUndefined();
      463 |
    > 464 |       expect(response.body.error).toContain(expected);
          |                                   ^
      465 |       expect(response.status).toBe(400);
      466 |     });
      467 |

      at Object.<anonymous> (test/orders-router.test.js:464:35)

  ● orders router › update method › returns 400 if deliverTo is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "deliverTo"
    Received string:    "Path not found: /orders-router/16"

      480 |       expect(response.body.data).toBeUndefined();
      481 |
    > 482 |       expect(response.body.error).toContain(expected);
          |                                   ^
      483 |       expect(response.status).toBe(400);
      484 |     });
      485 |

      at Object.<anonymous> (test/orders-router.test.js:482:35)

  ● orders router › update method › returns 400 if mobileNumber is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "mobileNumber"
    Received string:    "Path not found: /orders-router/17"

      499 |       expect(response.body.data).toBeUndefined();
      500 |
    > 501 |       expect(response.body.error).toContain(expected);
          |                                   ^
      502 |       expect(response.status).toBe(400);
      503 |     });
      504 |

      at Object.<anonymous> (test/orders-router.test.js:501:35)

  ● orders router › update method › returns 400 if mobileNumber is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "mobileNumber"
    Received string:    "Path not found: /orders-router/18"

      517 |       expect(response.body.data).toBeUndefined();
      518 |
    > 519 |       expect(response.body.error).toContain(expected);
          |                                   ^
      520 |       expect(response.status).toBe(400);
      521 |     });
      522 |

      at Object.<anonymous> (test/orders-router.test.js:519:35)

  ● orders router › update method › returns 400 if dishes is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "dish"
    Received string:    "Path not found: /orders-router/19"

      535 |
      536 |       expect(response.body.data).toBeUndefined();
    > 537 |       expect(response.body.error).toContain("dish");
          |                                   ^
      538 |       expect(response.status).toBe(400);
      539 |     });
      540 |

      at Object.<anonymous> (test/orders-router.test.js:537:35)

  ● orders router › update method › returns 400 if dishes is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "dish"
    Received string:    "Path not found: /orders-router/20"

      552 |       expect(response.body.data).toBeUndefined();
      553 |
    > 554 |       expect(response.body.error).toContain("dish");
          |                                   ^
      555 |       expect(response.status).toBe(400);
      556 |     });
      557 |

      at Object.<anonymous> (test/orders-router.test.js:554:35)

  ● orders router › update method › returns 400 if dishes is not an array

    expect(received).toContain(expected) // indexOf

    Expected substring: "dish"
    Received string:    "Path not found: /orders-router/21"

      568 |
      569 |       expect(response.body.data).toBeUndefined();
    > 570 |       expect(response.body.error).toContain("dish");
          |                                   ^
      571 |       expect(response.status).toBe(400);
      572 |     });
      573 |

      at Object.<anonymous> (test/orders-router.test.js:570:35)

  ● orders router › update method › returns 400 if a dish is missing quantity

    expect(received).toContain(expected) // indexOf

    Expected substring: "1"
    Received string:    "Path not found: /orders-router/22"

      605 |
      606 |       expect(response.body.data).toBeUndefined();
    > 607 |       expect(response.body.error).toContain("1");
          |                                   ^
      608 |       expect(response.body.error).toContain("quantity");
      609 |       expect(response.status).toBe(400);
      610 |     });

      at Object.<anonymous> (test/orders-router.test.js:607:35)

  ● orders router › update method › returns 400 if a dish quantity is zero

    expect(received).toContain(expected) // indexOf

    Expected substring: "0"
    Received string:    "Path not found: /orders-router/23"

      643 |
      644 |       expect(response.body.data).toBeUndefined();
    > 645 |       expect(response.body.error).toContain("0");
          |                                   ^
      646 |       expect(response.body.error).toContain("quantity");
      647 |       expect(response.status).toBe(400);
      648 |     });

      at Object.<anonymous> (test/orders-router.test.js:645:35)

  ● orders router › update method › returns 400 if a dish quantity is not an integer

    expect(received).toContain(expected) // indexOf

    Expected substring: "quantity"
    Received string:    "Path not found: /orders-router/24"

      692 |       expect(response.body.data).toBeUndefined();
      693 |       expect(response.body.error).toContain("2"); // 2 refers to the index
    > 694 |       expect(response.body.error).toContain("quantity");
          |                                   ^
      695 |       expect(response.status).toBe(400);
      696 |     });
      697 |

      at Object.<anonymous> (test/orders-router.test.js:694:35)

  ● orders router › update method › returns 400 if status is missing

    expect(received).toContain(expected) // indexOf

    Expected substring: "status"
    Received string:    "Path not found: /orders-router/25"

      710 |
      711 |       expect(response.body.data).toBeUndefined();
    > 712 |       expect(response.body.error).toContain(expected);
          |                                   ^
      713 |       expect(response.status).toBe(400);
      714 |     });
      715 |

      at Object.<anonymous> (test/orders-router.test.js:712:35)

  ● orders router › update method › returns 400 if status is empty

    expect(received).toContain(expected) // indexOf

    Expected substring: "status"
    Received string:    "Path not found: /orders-router/26"

      727 |
      728 |       expect(response.body.data).toBeUndefined();
    > 729 |       expect(response.body.error).toContain(expected);
          |                                   ^
      730 |       expect(response.status).toBe(400);
      731 |     });
      732 |

      at Object.<anonymous> (test/orders-router.test.js:729:35)

  ● orders router › update method › returns 400 if status is invalid

    expect(received).toContain(expected) // indexOf

    Expected substring: "status"
    Received string:    "Path not found: /orders-router/27"

      744 |
      745 |       expect(response.body.data).toBeUndefined();
    > 746 |       expect(response.body.error).toContain(expected);
          |                                   ^
      747 |       expect(response.status).toBe(400);
      748 |     });
      749 |   });

      at Object.<anonymous> (test/orders-router.test.js:746:35)

  ● orders router › delete method › returns 204 for existing order

    expect(received).toBeUndefined()

    Received: "Path not found: /orders-router/22"

      758 |
      759 |       expect(response.body.data).toBeUndefined();
    > 760 |       expect(response.body.error).toBeUndefined();
          |                                   ^
      761 |       expect(response.status).toBe(204);
      762 |       
      763 |       const deleted = await request(app)

      at Object.<anonymous> (test/orders-router.test.js:760:35)

  ● orders router › delete method › returns 400 if order.status !== 'pending'

    expect(received).toContain(expected) // indexOf

    Expected substring: "pending"
    Received string:    "Path not found: /orders-router/30"

      784 |
      785 |       expect(response.body.data).toBeUndefined();
    > 786 |       expect(response.body.error).toContain("pending");
          |                                   ^
      787 |       expect(response.status).toBe(400);
      788 |     });
      789 |   });

      at Object.<anonymous> (test/orders-router.test.js:786:35)

Test Suites: 2 failed, 2 total
Tests:       38 failed, 30 passed, 68 total
Snapshots:   0 total
Time:        0.606 s, estimated 1 s
Ran all test suites.

